[{"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\index.js":"1","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\reportWebVitals.js":"2","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\App.js":"3","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\header\\index.js":"4","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\TakeTest.js":"5","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\footer\\Footer.js":"6","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\api\\questionApi.js":"7","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\api\\axiosClient.js":"8","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\question.js":"9","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\store.js":"10","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\reducer\\index.js":"11","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\actions\\questionAction.js":"12","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\reducer\\quetionReducer.js":"13","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\actionType.js":"14","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\formTestFillOut\\FormFillOut.js":"15","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\changesentence\\ChangeSentence.js":"16","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\listen\\QuestionListen.js":"17","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\synonyms\\QuestionSynonyms.js":"18","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\readAndAnswer\\ReadAndAnswer.js":"19","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\SelectASuitableWork\\SelectASuitableWork.js":"20"},{"size":500,"mtime":499162500000,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":506,"mtime":1611822410025,"results":"24","hashOfConfig":"22"},{"size":1598,"mtime":1614680013338,"results":"25","hashOfConfig":"22"},{"size":13733,"mtime":1614658062639,"results":"26","hashOfConfig":"22"},{"size":155,"mtime":1611637276210,"results":"27","hashOfConfig":"22"},{"size":404,"mtime":1611826134663,"results":"28","hashOfConfig":"22"},{"size":402,"mtime":1611646051518,"results":"29","hashOfConfig":"22"},{"size":2017,"mtime":1613553321834,"results":"30","hashOfConfig":"22"},{"size":387,"mtime":1611822038892,"results":"31","hashOfConfig":"22"},{"size":176,"mtime":1611821468459,"results":"32","hashOfConfig":"22"},{"size":274,"mtime":1611803388449,"results":"33","hashOfConfig":"22"},{"size":550,"mtime":1611826752981,"results":"34","hashOfConfig":"22"},{"size":100,"mtime":1611803049863,"results":"35","hashOfConfig":"22"},{"size":1883,"mtime":1613553414583,"results":"36","hashOfConfig":"22"},{"size":1487,"mtime":1613703334788,"results":"37","hashOfConfig":"22"},{"size":3192,"mtime":1614657043674,"results":"38","hashOfConfig":"22"},{"size":2496,"mtime":1613722726294,"results":"39","hashOfConfig":"22"},{"size":4853,"mtime":1614659921500,"results":"40","hashOfConfig":"22"},{"size":2316,"mtime":1614656280554,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"19l4k73",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\index.js",[],["91","92"],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\reportWebVitals.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\App.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\header\\index.js",["93","94","95","96","97","98"],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\TakeTest.js",["99","100"],"  import React, { useEffect, useState } from 'react'\n  import './style.scss'\n  import questionsApi from '../../../api/questionApi'\n  import Question from './question'\n  import { Tabs } from 'antd';\n  import { useDispatch, useSelector } from 'react-redux';\n  import {\n    getQuestion as getQuestionAction,\n    getQuestionFillOut as getQuestionFillOutAction\n  } from '../../../redux/actions/questionAction'\n  import FormFillOut from './formTestFillOut/FormFillOut'\n  import ChangeSentence from './changesentence/ChangeSentence'\n  import QuestionListen from './listen/QuestionListen'\n  import QuestionSynonyms from './synonyms/QuestionSynonyms'\n  import QuestionRead from './readAndAnswer/ReadAndAnswer'\n  import SelectASuitableWork from './SelectASuitableWork/SelectASuitableWork'\n\n  const { TabPane } = Tabs;\n\n  const TakeTest = () => {\n    const dispatch = useDispatch()\n\n    const listQuestions = useSelector(store => store.questionReducer.listQuestionsTrueFalse)\n    const arrQuestionFillOut = useSelector(store => store.questionReducer.listQuestionsFillOut)\n    const [listChangeSentence, setListChangeSentence] = useState([])\n    const [listQuestionListen, setListQuestionListen] = useState([])\n    const [listQuestionSynonyms, setListQuestionSynonyms] = useState([])\n    const [listQuestionRead, setListQuestionRead] = useState([])\n    const [listQuestionSelect, setListQuestionSelect] = useState([])\n\n    const [arrQuestion, setArrQuestion] = useState([])\n    const [listAnswerUser, setListAnswerUser] = useState({})\n    console.log(listAnswerUser);\n\n    const [start, setStart] = useState(false)\n    const [answerTrue, setAnswerTrue] = useState(0)\n    const [count, setCount] = useState(0)\n\n\n    const randomQuestion = (arr = [], number) => {\n      let newArr = []\n      while(newArr.length < number) {\n        const question = Math.floor(Math.random() * arr.length )\n        newArr.push(arr[question])\n        const arrFilter = newArr.filter((item, index) => (newArr.indexOf(item) === index))\n        newArr = arrFilter\n      }\n      return newArr\n    }\n\n    const onStart = () => {\n      const listQuestion = randomQuestion(listQuestions,6)\n      const listQuestionFillOut = randomQuestion(arrQuestionFillOut,6)\n      const listQuestionChangeSentence = randomQuestion(listChangeSentence,5)\n      const listSynonyms = randomQuestion(listQuestionSynonyms,2)\n      const listRead = randomQuestion(listQuestionRead,1)\n      const listSelect = randomQuestion(listQuestionSelect,3)\n      const arr = listQuestion.concat(listQuestionFillOut, listQuestionChangeSentence, listSynonyms, listQuestionListen, listRead,  listSelect)\n      setArrQuestion(arr)\n      setStart(true)\n      setCount(0)\n      setAnswerTrue(0)\n      setListAnswerUser({})\n    }\n\n    const fetchQuestionApi = async () => {\n      const response = await questionsApi.fetchQuestionApi('questions')\n      dispatch(getQuestionAction(response))\n\n      const questionFillOut = await questionsApi.fetchQuestionApi('formFillOut')\n      dispatch(getQuestionFillOutAction(questionFillOut))\n\n      const questionChangeSentence = await questionsApi.fetchQuestionApi('changesentence')\n      setListChangeSentence(questionChangeSentence)\n\n      const questionListen = await questionsApi.fetchQuestionApi('listening')\n      setListQuestionListen(questionListen)\n\n      const questionSynonyms = await questionsApi.fetchQuestionApi('synonyms')\n      setListQuestionSynonyms(questionSynonyms)\n\n      const questionRead = await questionsApi.fetchQuestionApi('readandanswer')\n      setListQuestionRead(questionRead)\n\n      const questionSelect = await questionsApi.fetchQuestionApi('selectasuitableword')\n      setListQuestionSelect(questionSelect)\n    }\n\n    useEffect(() => {\n      fetchQuestionApi()\n    }, [])\n\n    const answerUser = (answer, id) => {\n      setListAnswerUser({\n        ...listAnswerUser,\n        [id]: answer\n      })\n    }\n    const clickCancel = () => {\n      setStart(false)\n      setListAnswerUser({})\n      setArrQuestion([])\n      setAnswerTrue(0)\n    }\n    const onsubmitTest = () => {\n      let a = 0\n      let numberQuestion = arrQuestion.length\n\n      arrQuestion.forEach(elem => {\n        if ((elem.typeID === 2 || elem.typeID === 1 || elem.typeID === 3 || elem.typeID === 4) && listAnswerUser[elem.id] ) {\n          const trimCorrectAnswer = elem.correctAnswer.replace(/\\s+/g, \"\")\n          const trimAnswer = listAnswerUser[elem.id].replace(/\\s+/g, \"\")\n          if(trimAnswer === trimCorrectAnswer) {\n            a++\n          }\n        }\n\n        if (elem.typeID === 5) {\n          numberQuestion += 3\n        }\n\n        if (elem.typeID === 6) {\n          numberQuestion += 8\n        }\n\n        if (elem.typeID === 5 && listAnswerUser[elem.id]) {\n          if(listAnswerUser[elem.id].a) {\n            const answerA = elem.correctAnswer.a.replace(/\\s+/g, \"\")\n            const answerAUser = listAnswerUser[elem.id].a.replace(/\\s+/g, \"\")\n            if(answerA === answerAUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].b) {\n            const answerB = elem.correctAnswer.b.replace(/\\s+/g, \"\")\n            const answerBUser = listAnswerUser[elem.id].b.replace(/\\s+/g, \"\")\n            if(answerB === answerBUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].c) {\n            const answerC = elem.correctAnswer.c.replace(/\\s+/g, \"\")\n            const answerCUser = listAnswerUser[elem.id].c.replace(/\\s+/g, \"\")\n            if(answerC === answerCUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].d) {\n            const answerD = elem.correctAnswer.d.replace(/\\s+/g, \"\")\n            const answerDUser = listAnswerUser[elem.id].d.replace(/\\s+/g, \"\")\n            if(answerD === answerDUser) {\n              a++\n            }\n          }\n        }\n\n        if (elem.typeID === 6 && listAnswerUser[elem.id]) {\n          if (listAnswerUser[elem.id].a) {\n            const answerA = elem.correctAnswer.a.replace(/\\s+/g, \"\")\n            const answerAUser = listAnswerUser[elem.id].a.replace(/\\s+/g, \"\")\n            if(answerA === answerAUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].b) {\n            const answerB = elem.correctAnswer.b.replace(/\\s+/g, \"\")\n            const answerBUser = listAnswerUser[elem.id].b.replace(/\\s+/g, \"\")\n            if(answerB === answerBUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].c) {\n            const answerC = elem.correctAnswer.c.replace(/\\s+/g, \"\")\n            const answerCUser = listAnswerUser[elem.id].c.replace(/\\s+/g, \"\")\n            if(answerC === answerCUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].d) {\n            const answerD = elem.correctAnswer.d.replace(/\\s+/g, \"\")\n            const answerDUser = listAnswerUser[elem.id].d.replace(/\\s+/g, \"\")\n            if(answerD === answerDUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].e) {\n            const answerE = elem.correctAnswer.e.replace(/\\s+/g, \"\")\n            const answerEUser = listAnswerUser[elem.id].e.replace(/\\s+/g, \"\")\n            if(answerE === answerEUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].f) {\n            const answerF = elem.correctAnswer.f.replace(/\\s+/g, \"\")\n            const answerFUser = listAnswerUser[elem.id].f.replace(/\\s+/g, \"\")\n            if(answerF === answerFUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].g) {\n            const answerG = elem.correctAnswer.g.replace(/\\s+/g, \"\")\n            const answerGUser = listAnswerUser[elem.id].g.replace(/\\s+/g, \"\")\n            if(answerG === answerGUser) {\n              a++\n            }\n          }\n\n          if (listAnswerUser[elem.id].h) {\n            const answerH = elem.correctAnswer.h.replace(/\\s+/g, \"\")\n            const answerHUser = listAnswerUser[elem.id].h.replace(/\\s+/g, \"\")\n            if(answerH === answerHUser) {\n              a++\n            }\n          }\n        }\n        if (elem.typeID === 7 && listAnswerUser[elem.id]) {\n          const trimCorrectAnswer = elem.correctAnswer.replace(/\\s+/g, \"\")\n          const trimAnswer = listAnswerUser[elem.id].replace(/\\s+/g, \"\")\n          if(trimAnswer === trimCorrectAnswer) {\n            a++\n          }\n        }\n\n\n      })\n\n      const score = Math.round(((10 / numberQuestion ) * a) * 100) / 100\n      setAnswerTrue(a)\n      setCount(score)\n      setStart(false)\n      setListAnswerUser({})\n      setArrQuestion([])\n    }\n\n    const callback = (key) => {\n\n    }\n\n    return (\n      <div className=\"takeTest\">\n        <div className=\"row\">\n          <div className=\"col-4 takeTest__left\">\n            <div className=\"takeTest__left__start\" style={{display: start ? 'block' : 'none'}}>\n              <p className=\"takeTest__left__start--title\">thời gian làm bài</p>\n              <div className=\"takeTest__left__start--time\"><span>15 phút</span></div>\n            </div>\n\n            <div className=\"takeTest__left__information\">\n              <p className=\"takeTest__left__information--title\">tên đề thi</p>\n              <div ><label>Điểm: </label> <span>{count}</span></div>\n              <div ><label>Số câu: </label> <span>{arrQuestion.length}</span></div>\n              <div ><label>Số câu làm được: </label> <span>{answerTrue}</span></div>\n              <div ><label>Thời gian: </label> <span>15</span> phút</div>\n            </div>\n\n            <div className=\"takeTest__left__action\">\n              <button className=\"takeTest__left__action--submit\" onClick={onsubmitTest} style={{display: start ? 'block' : 'none'}}>Nộp bài</button>\n              <button className=\"takeTest__left__action--start\" onClick={onStart} style={{display: start ? 'none' : 'block'}}>Bắt đầu làm</button>\n              <button className=\"takeTest__left__action--cancel\" onClick={clickCancel} style={{display: start ? 'block' : 'none'}}>Huỷ</button>\n            </div>\n\n            <div className=\"takeTest__left__shear\">\n              <p>Chia sẻ lên</p>\n              <div>\n                <span className=\"takeTest__left__shear--facebook\"><i className=\"fab fa-facebook-f\"></i></span>\n                <span className=\"takeTest__left__shear--twitter\"><i className=\"fab fa-twitter\"></i></span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-8 takeTest__right\">\n            <div className=\"takeTest__right__tutorial\" style={{display: start ? 'none' : 'block'}}>\n            <div className=\"takeTest__right__tutorial--title\">Hướng dẫn làm bài</div>\n            <div className=\"takeTest__right__tutorial--content\">\n              <p>Hướng dẫn làm bài thi trắc nghiệm</p>\n              <p>1. Đợi đến khi đến thời gian làm bài</p>\n              <p>2. CLick vào nút \"bắt đầu làm bài\" để tiến hành làm bài thi</p>\n              <p>3. Ở mỗi câu hỏi , chọn đáp án đúng</p>\n              <p>4. Hết thời gian làm bài, hệ thống sẽ tự thu bài. Bạn có thể nộp bài trước khi thời gian kết thúc bằng cách nhấn nút<span className=\"takeTest__right__tutorial--span\">Nộp bài</span></p>\n            </div>\n            </div>\n\n            <div className=\"takeTest__right__question\" style={{display: start ? 'block' : 'none'}}>\n              <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                <TabPane tab=\"Chọn đáp án đúng\" key=\"1\">\n                  <Question\n                    arrQuestion={arrQuestion}\n                    answerUser = {answerUser}\n                    listAnswerUser = {listAnswerUser}\n                  />\n                </TabPane>\n                <TabPane tab=\"Điền vào chỗ trống\" key=\"2\">\n                  <FormFillOut\n                    arrQuestion={arrQuestion}\n                    answerUser = {answerUser}\n                    listAnswerUser = {listAnswerUser}\n                  />\n                </TabPane>\n                <TabPane tab=\"Viết lại câu\" key=\"3\">\n                  <ChangeSentence\n                      arrQuestion={arrQuestion}\n                      answerUser = {answerUser}\n                      listAnswerUser = {listAnswerUser}\n                    />\n                </TabPane>\n                <TabPane tab=\"Chọn từ để câu không khác nghĩa\" key=\"4\">\n                  <QuestionSynonyms\n                      arrQuestion={arrQuestion}\n                      answerUser = {answerUser}\n                      listAnswerUser = {listAnswerUser}\n                    />\n                </TabPane>\n                <TabPane tab=\"Nghe\" key=\"5\">\n                  <QuestionListen\n                    arrQuestion={arrQuestion}\n                    answerUser = {answerUser}\n                    listAnswerUser = {listAnswerUser}\n                  />\n                </TabPane>\n                <TabPane tab=\"đọc và trả lời câu hỏi\" key=\"6\">\n                  <QuestionRead\n                    arrQuestion={arrQuestion}\n                    answerUser = {answerUser}\n                    listAnswerUser = {listAnswerUser}\n                  />\n                </TabPane>\n                <TabPane tab=\"chon từ phù hợp\" key=\"7\">\n                  <SelectASuitableWork\n                    arrQuestion={arrQuestion}\n                    answerUser = {answerUser}\n                    listAnswerUser = {listAnswerUser}\n                  />\n                </TabPane>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  export default TakeTest\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\footer\\Footer.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\api\\questionApi.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\api\\axiosClient.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\question.js",["101"],"import React, {useEffect, useState} from 'react'\nimport { Radio } from 'antd';\n\nconst Question = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [value, setValue] = useState(null);\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n  const onChange = e => {\n    answerUser(e.target.value, question.id)\n    setValue(e.target.value);\n  }\n\n  useEffect(() => {\n    setValue(null)\n    setIndex('')\n    setQuestion('')\n  },[arrQuestion])\n\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n  }\n\n  return (\n    <>\n      {\n        arrQuestion &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi: {index + 1} </p>\n      }\n      <p className=\"takeTest__right__question--question\">{question.question}</p>\n\n      <div className=\"takeTest__right__question--answer\">\n        {\n          question && question.typeID === 1 &&\n          (\n            <Radio.Group onChange={onChange} value={listAnswerUser[question.id] ? listAnswerUser[question.id] : value} >\n              <div className=\"row\">\n                <div className=\"col-6 item\"><Radio value={question.answer.a}> {question.answer.a}</Radio></div>\n                <div className=\"col-6 item\"><Radio value={question.answer.b}> {question.answer.b}</Radio></div>\n                <div className=\"col-6 item\"><Radio value={question.answer.c}> {question.answer.c}</Radio></div>\n                <div className=\"col-6 item\"><Radio value={question.answer.d}> {question.answer.d}</Radio></div>\n              </div>\n            </Radio.Group>\n          )\n        }\n      </div>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if(item.typeID === 1) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default Question\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\store.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\reducer\\index.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\actions\\questionAction.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\reducer\\quetionReducer.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\redux\\actionType.js",[],"C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\formTestFillOut\\FormFillOut.js",["102"],"import React, {useState, useEffect} from 'react'\n\nconst FormFillOut = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n  const onHandleInput = e => {\n    answerUser(e.target.value, question.id)\n  }\n\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n  }\n\n  useEffect(() => {\n    setIndex('')\n    setQuestion('')\n  },[arrQuestion])\n\n  return (\n    <>\n      {\n        question &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi {index + 1}:<span>điền vào chỗ trống</span></p>\n      }\n      <p className=\"takeTest__right__question--question\">\n        {\n          question &&\n          question.question.map((item, index) => {\n            if (item === \"__\" ||\n            item === \"___\" || item === \"____\" || item === \"____\"||\n            item === \"____\" || item === \"____\" || item === \"_____\"\n            || item === \"______\" || item === \"_______\" || item === \"________\"\n            ) {\n              return (\n                <span key={index}><input\n                  type=\"text\"\n                  name={'value'+ index}\n                  value={listAnswerUser[question.id] ? listAnswerUser[question.id] : ''}\n                  onChange={onHandleInput}\n                /></span>\n              )\n            }\n            return (\n              <span key={index} >{item}</span>\n            )\n          })\n        }\n      </p>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if(item.typeID === 2) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default FormFillOut\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\changesentence\\ChangeSentence.js",["103"],"import React, {useState, useEffect} from 'react'\n\nconst ChangeSentence = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n\n  const onHandleInput = e => {\n    answerUser(e.target.value, question.id)\n  }\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n  }\n\n  useEffect(() => {\n    setIndex('')\n    setQuestion('')\n  },[arrQuestion])\n\n  return (\n    <>\n      {\n        question &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi {index + 1}: điền vào chỗ trống</p>\n      }\n      <p className=\"takeTest__right__question--question\">\n        {\n          question && (\n            <>\n              <span>{question.question}</span>\n              <input\n                type=\"text\"\n                value={listAnswerUser[question.id] ? listAnswerUser[question.id] : ''}\n                onChange={onHandleInput}\n                className=\"questionChangeSentence\"\n              />\n            </>\n          )\n        }\n      </p>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if(item.typeID === 4  ) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default ChangeSentence\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\listen\\QuestionListen.js",["104"],"import React, {useState, useEffect} from 'react'\n\nconst QuestionListen = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n  const [listAnswer, setListAnswer] = useState({a: '', b: '', c: '', d: ''})\n\n  const onHandleInputA = event => {\n    const value = {\n      ...listAnswer,\n      a: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputB = e => {\n    const value = {\n      ...listAnswer,\n      b: e.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputC = e => {\n    const value = {\n      ...listAnswer,\n      c: e.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputD = e => {\n    const value = {\n      ...listAnswer,\n      d: e.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n\n\n\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n    setListAnswer({})\n  }\n\n  useEffect(() => {\n    setIndex('')\n    setQuestion('')\n    setListAnswer({})\n  },[arrQuestion])\n\n\n  return (\n    <>\n      {\n        question &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi {index + 1}: điền vào chỗ trống</p>\n      }\n      <p className=\"takeTest__right__question--question\">\n        {\n          question && (\n            <>\n              <audio\n                className=\"audio\"\n                controls\n                src={question.question}>\n              </audio>\n            </>\n          )\n        }\n      </p>\n      <div className=\"takeTest__right__question--answer\">\n        {\n          question && (\n            <div className=\"row\">\n              <div className=\"col-3 img\">\n                <img src={question.answer.a} alt='imgA'/>\n                <input\n                  type=\"text\"\n\n                  onChange={onHandleInputA}\n                />\n              </div>\n              <div className=\"col-3 img\">\n                <img src={question.answer.b} alt='imgB'/>\n                <input\n                  type=\"text\"\n\n                  onChange={onHandleInputB}\n                />\n              </div>\n              <div className=\"col-3 img\">\n                <img src={question.answer.c} alt='imgC'/>\n                <input\n                  type=\"text\"\n\n                  onChange={onHandleInputC}\n                />\n              </div>\n              <div className=\"col-3 img\">\n                <img src={question.answer.d} alt='imgD'/>\n                <input\n                  type=\"text\"\n\n                  onChange={onHandleInputD}\n                />\n              </div>\n            </div>\n          )\n        }\n      </div>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if (item.typeID === 5) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default QuestionListen\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\synonyms\\QuestionSynonyms.js",["105"],"import React, {useState, useEffect} from 'react'\nimport { Radio } from 'antd';\n\nconst QuestionSynonyms = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [value, setValue] = useState(null);\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n  const onChange = e => {\n    answerUser(e.target.value, question.id)\n    setValue(e.target.value);\n  }\n\n  useEffect(() => {\n    setValue(null)\n    setIndex('')\n    setQuestion('')\n  },[arrQuestion])\n\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n  }\n  return (\n    <>\n      {\n        question &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi {index + 1}: điền vào chỗ trống</p>\n      }\n      <p className=\"takeTest__right__question--question\">\n        {\n          question && (\n            <span>{\n              question.question.map((item, index) => {\n                if (index === 1) {\n                  return (\n                    <b key={index} className=\"takeTest__right__question--bold\"> {item} </b>\n                  )\n                }\n                return (\n                  <span key={index}>{item}</span>\n                )\n              })\n            }</span>\n          )\n        }\n      </p>\n      <div className=\"takeTest__right__question--answer\">\n        {\n          question && question.typeID === 3 &&\n          (\n            <Radio.Group onChange={onChange} value={listAnswerUser[question.id] ? listAnswerUser[question.id] : value} >\n              <div className=\"row\">\n                <div className=\"col-6 item\"><Radio value={question.answer.a}> {question.answer.a}</Radio></div>\n                <div className=\"col-6 item\"><Radio value={question.answer.b}> {question.answer.b}</Radio></div>\n                <div className=\"col-6 item\"><Radio value={question.answer.c}> {question.answer.c}</Radio></div>\n                <div className=\"col-6 item\"><Radio value={question.answer.d}> {question.answer.d}</Radio></div>\n              </div>\n            </Radio.Group>\n          )\n        }\n      </div>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if(item.typeID === 3) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default QuestionSynonyms\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\readAndAnswer\\ReadAndAnswer.js",["106"],"import React, {useState, useEffect} from 'react'\n\nconst QuestionListen = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n  const [listAnswer, setListAnswer] = useState({a:'', b:'', c:'', d:'', e:'', f:'', g:'' ,h:'' })\n  const onHandleInputA = event => {\n    const value = {\n      ...listAnswer,\n      a: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n\n  const onHandleInputB = event => {\n    const value = {\n      ...listAnswer,\n      b: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputC = event => {\n    const value = {\n      ...listAnswer,\n      c: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputD = event => {\n    const value = {\n      ...listAnswer,\n      d: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputE = event => {\n    const value = {\n      ...listAnswer,\n      e: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputF = event => {\n    const value = {\n      ...listAnswer,\n      f: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputG = event => {\n    const value = {\n      ...listAnswer,\n      g: event.target.value\n    }\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n  const onHandleInputH = event => {\n    const value = {\n      ...listAnswer,\n      h: event.target.value\n    }\n\n    setListAnswer(value)\n    answerUser(value, question.id)\n  }\n\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n    setListAnswer({})\n  }\n  useEffect(() => {\n    setIndex('')\n    setQuestion('')\n    setListAnswer({})\n  },[arrQuestion])\n\n  return (\n    <>\n      {\n        question &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi {index + 1}: trả lời câu hỏi</p>\n      }\n      <p className=\"takeTest__right__question--question\">\n        {\n          question && (\n            <span>\n              {question.question}\n            </span>\n          )\n        }\n      </p>\n      <div className=\"takeTest__right__question--answer\">\n        <div className=\"row\">\n          {\n            question && (\n\n              <div>\n                <div className=\"col-12 read\">\n                  <p>1. {question.answer.a}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputA}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>2. {question.answer.b}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputB}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>3. {question.answer.c}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputC}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>4. {question.answer.d}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputD}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>5. {question.answer.e}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputE}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>6. {question.answer.f}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputF}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>7. {question.answer.g}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputG}\n                  />\n                </div>\n\n                <div className=\"col-12 read\">\n                  <p>8. {question.answer.h}</p>\n                  <input\n                    type=\"text\"\n                    onChange={onHandleInputH}\n                  />\n                </div>\n              </div>\n            )\n          }\n        </div>\n      </div>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if (item.typeID === 6) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default QuestionListen\n","C:\\Users\\PC\\Desktop\\webTestEnglish\\web-test-english\\src\\components\\main\\takeTest\\SelectASuitableWork\\SelectASuitableWork.js",["107"],"import React, {useState, useEffect} from 'react'\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nconst SelectASuitableWork = ({arrQuestion,answerUser,listAnswerUser}) => {\n  const [index, setIndex] = useState('')\n  const [question, setQuestion] = useState('')\n  const clickQuestion = (item,index) => {\n    setQuestion(item)\n    setIndex(index)\n  }\n\n  function onChange(value) {\n    answerUser(value,question.id);\n  }\n\n\n  useEffect(() => {\n    setIndex('')\n    setQuestion('')\n  },[arrQuestion])\n\n  return (\n    <>\n      {\n        question &&\n        <p className=\"takeTest__right__question--numberQuestion\">Câu hỏi {index + 1}:<span>điền vào chỗ trống</span></p>\n      }\n      <div className=\"takeTest__right__question--question\">\n        {\n          question &&\n          question.question.map((item, index) => {\n            if (item === \"__\" ||\n            item === \"___\" || item === \"____\" || item === \"____\"||\n            item === \"____\" || item === \"____\" || item === \"_____\"\n            || item === \"______\" || item === \"_______\" || item === \"________\"\n            ) {\n              return (\n                <span key={index}>\n                  <Select\n                    style={{ width: 150, margin: 5} }\n                    placeholder=\"Select a answer\"\n                    onChange={onChange}\n                    value={listAnswerUser[question.id] ? listAnswerUser[question.id] : null}\n                  >\n                    {\n                      question.answer.map((item,index) => {\n                        return (\n                          <Option value={item} key={index}>{item}</Option>\n                        )\n                      })\n                    }\n                  </Select>\n                </span>\n              )\n            }\n            return (\n              <span key={index} >{item}</span>\n            )\n          })\n        }\n      </div>\n      <div className=\"takeTest__right__listQuestion\">\n        {\n          arrQuestion &&\n          arrQuestion.map((item, index) => {\n            if(item.typeID === 7) {\n              return (\n                <button key={index} onClick={() => clickQuestion(item,index)}>Câu: {index + 1}</button>\n              )\n            }\n          })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default SelectASuitableWork\n",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":23,"column":19,"nodeType":"114","endLine":23,"endColumn":59},{"ruleId":"112","severity":1,"message":"113","line":26,"column":19,"nodeType":"114","endLine":26,"endColumn":52},{"ruleId":"112","severity":1,"message":"113","line":29,"column":19,"nodeType":"114","endLine":29,"endColumn":52},{"ruleId":"112","severity":1,"message":"113","line":32,"column":19,"nodeType":"114","endLine":32,"endColumn":52},{"ruleId":"112","severity":1,"message":"113","line":35,"column":19,"nodeType":"114","endLine":35,"endColumn":52},{"ruleId":"112","severity":1,"message":"113","line":38,"column":19,"nodeType":"114","endLine":38,"endColumn":52},{"ruleId":"115","severity":1,"message":"116","line":45,"column":41,"nodeType":"117","messageId":"118","endLine":45,"endColumn":90},{"ruleId":"119","severity":1,"message":"120","line":91,"column":8,"nodeType":"121","endLine":91,"endColumn":10,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":50,"column":41,"nodeType":"117","messageId":"125","endLine":50,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":53,"column":41,"nodeType":"117","messageId":"125","endLine":53,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":44,"column":41,"nodeType":"117","messageId":"125","endLine":44,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":118,"column":41,"nodeType":"117","messageId":"125","endLine":118,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":65,"column":41,"nodeType":"117","messageId":"125","endLine":65,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":177,"column":41,"nodeType":"117","messageId":"125","endLine":177,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":67,"column":41,"nodeType":"117","messageId":"125","endLine":67,"endColumn":43},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'newArr'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchQuestionApi'. Either include it or remove the dependency array.","ArrayExpression",["128"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},"Update the dependencies array to be: [fetchQuestionApi]",{"range":"131","text":"132"},[3761,3763],"[fetchQuestionApi]"]